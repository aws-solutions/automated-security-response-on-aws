# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
description: |
  ### Document Name - AWSConfigRemediation-RemoveUnrestrictedSourceIngressRules

  ## What does this document do?
  This runbook removes all ingress rules from the security group you specify that allow traffic from all source addresses using the [RevokeSecurityGroupIngress](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RevokeSecurityGroupIngress.html) API.

  ## Input Parameters
  * SecurityGroupId: (Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.

  ## Output Parameters
  * RemoveUnrestrictedIngressRulesAndVerify.Response - The standard HTTP response from the RevokeSecurityGroupIngress API.

schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role/[\w+=,.@-]+$'
  SecurityGroupId:
    type: String
    description: (Required) The ID of the security group that you want to remove ingress rules that allow traffic from all source addresses from.
    allowedPattern: ^sg-[a-z0-9]+$

outputs:
- RemoveUnrestrictedIngressRulesAndVerify.Response
mainSteps:
- name: RemoveUnrestrictedIngressRulesAndVerify
  action: aws:executeScript
  timeoutSeconds: 600
  isEnd: true
  description: |
    ## RemoveUnrestrictedIngressRulesAndVerify
    Removes all ingress rules that allow traffic from all source addresses from the security group you specified in the SecurityGroupId parameter and verifies successful rules removal.
    ## Outputs
    * Response: The standard HTTP response from the RevokeSecurityGroupIngress API.
  inputs:
    Runtime: python3.7
    Handler: remove_sg_unrestricted_ingress_rules
    InputPayload:
      SecurityGroupId: "{{ SecurityGroupId }}"
    Script: |-
      import boto3
      def remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id):
        paginator = ec2.get_paginator('describe_security_groups')
        response_iterator = paginator.paginate(
        Filters=[ {'Name': 'ip-permission.cidr', 'Values': [ '0.0.0.0/0' ] },],
        GroupIds=[security_group_id]
        )

        ip_permissions = []
        for sgs in response_iterator:
          for sg in sgs.get('SecurityGroups'):
            for ip in sg.get('IpPermissions'):
              for rule in ip.get('IpRanges'):
                if(rule['CidrIp'] == '0.0.0.0/0'):
                  permissions_dict = {'IpProtocol': ip['IpProtocol'], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}
                  if not ip.get("FromPort") is None:
                    permissions_dict["FromPort"] = ip["FromPort"]
                  if not ip.get("ToPort") is None:
                    permissions_dict["ToPort"] = ip["ToPort"]
                  ip_permissions.append(permissions_dict)
        if ip_permissions:
          return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)

      def remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id):
          paginator = ec2.get_paginator('describe_security_groups')
          response_iterator = paginator.paginate(
          Filters=[ {'Name': 'ip-permission.ipv6-cidr', 'Values': [ '::/0' ] },],
          GroupIds=[security_group_id]
          )

          ip_permissions = []
          for sgs in response_iterator:
            for sg in sgs.get('SecurityGroups'):
              for ip in sg.get('IpPermissions'):
                for rule in ip.get('Ipv6Ranges'):
                  if(rule['CidrIpv6'] == '::/0'):
                    permissions_dict = {'IpProtocol': ip['IpProtocol'], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}
                    if not ip.get("FromPort") is None:
                      permissions_dict["FromPort"] = ip["FromPort"]
                    if not ip.get("ToPort") is None:
                      permissions_dict["ToPort"] = ip["ToPort"]
                    ip_permissions.append(permissions_dict)
          if ip_permissions:
              return ec2.revoke_security_group_ingress(GroupId=security_group_id, IpPermissions=ip_permissions)

      def verify_sg_unrestricted_rules_removed(ec2, security_group_id):
          error_message = f"Verification Failed. Security Group {security_group_id} unrestricted ingress rules not removed "

          unrestricted_ingress_rules_ipv4 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[  {'Name': 'ip-permission.cidr','Values': ['0.0.0.0/0' ]} ])
          if unrestricted_ingress_rules_ipv4['SecurityGroups']:
            raise Exception(error_message)

          unrestricted_ingress_rules_ipv6 = ec2.describe_security_groups(GroupIds=[ security_group_id ], Filters=[ {'Name': 'ip-permission.ipv6-cidr','Values': ['::/0' ]} ])
          if unrestricted_ingress_rules_ipv6['SecurityGroups']:
            raise Exception(error_message)

      def remove_sg_unrestricted_ingress_rules(event, context):

          ec2 = boto3.client('ec2')
          security_group_id = event['SecurityGroupId']
          ipv4_response = remove_unrestricted_ingress_rules_ipv4(ec2, security_group_id)
          ipv6_response = remove_unrestricted_ingress_rules_ipv6(ec2, security_group_id)

          verify_sg_unrestricted_rules_removed(ec2, security_group_id)

          response = []
          if ipv4_response:
            response.append(ipv4_response)
          if ipv6_response:
            response.append(ipv6_response)
          return response

  outputs:
  - Name: Response
    Selector: $.Payload
    Type: MapList

- name: UpdateFinding
  action: 'aws:executeAwsApi'
  inputs:
    Service: securityhub
    Api: BatchUpdateFindings
    FindingIdentifiers:
    - Id: '{{ParseInput.FindingId}}'
      ProductArn: '{{ParseInput.ProductArn}}'
    Note:
      Text: 'Disabled public access to the security group {{ ParseInput.GroupId }}.'
      UpdatedBy: 'ASR-CIS_1.2.0_4.1'
    Workflow:
      Status: RESOLVED
  description: Update finding
  isEnd: true
