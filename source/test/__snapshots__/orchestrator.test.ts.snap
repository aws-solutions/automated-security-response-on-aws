// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test App Orchestrator Construct 1`] = `
{
  "Conditions": {
    "OrchestratorTicketingEnabledCondition92C496EF": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "TicketGenFunctionName",
            },
            "",
          ],
        },
      ],
    },
  },
  "Parameters": {
    "ReuseOrchestratorLogGroup": {
      "AllowedValues": [
        "yes",
        "no",
      ],
      "Default": "no",
      "Description": "Reuse existing Orchestrator Log Group? Choose "yes" if the log group already exists, else "no"",
      "Type": "String",
    },
    "TicketGenFunctionName": {
      "AllowedPattern": "^([a-zA-Z0-9\\-_]{1,64})?$",
      "Description": "Enter the name of the Lambda function you would like to use to generate tickets when remediations are successfully completed. This function must be in the same region where you are deploying this stack. Leave this field blank if you do not want to enable ticketing. The function you provide should be implemented to create a ticket in your service of choice based on input from the Orchestrator step function. To reference or use the provided Ticket Generator function for Jira or ServiceNow, see the Blueprint stacks in the solution's implementation guide.",
      "Type": "String",
    },
  },
  "Resources": {
    "OrchestratorNestedLogStackNestedStackNestedLogStackNestedStackResource91223B3E": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Parameters": {
          "KmsKeyArn": {
            "Fn::GetAtt": [
              "SHARRKeyC551FE02",
              "Value",
            ],
          },
          "ReuseOrchestratorLogGroup": {
            "Ref": "ReuseOrchestratorLogGroup",
          },
        },
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "SourceCode",
                  "General",
                  "S3Bucket",
                ],
              },
              "-reference.s3.amazonaws.com/",
              {
                "Fn::FindInMap": [
                  "SourceCode",
                  "General",
                  "KeyPrefix",
                ],
              },
              "/aws-sharr-orchestrator-log.template",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestratorRole9CF251DB": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "CloudWatch Logs permissions require resource * except for DescribeLogGroups, except for GovCloud, which only works with resource *",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "CloudWatch Logs permissions require resource * except for DescribeLogGroups, except for GovCloud, which only works with resource *",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:undefined",
                        ],
                      ],
                    },
                    {
                      "Fn::If": [
                        "OrchestratorTicketingEnabledCondition92C496EF",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition",
                              },
                              ":lambda:",
                              {
                                "Ref": "AWS::Region",
                              },
                              ":",
                              {
                                "Ref": "AWS::AccountId",
                              },
                              ":function:",
                              {
                                "Ref": "TicketGenFunctionName",
                              },
                            ],
                          ],
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:GenerateDataKey",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":kms:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":alias/bbb-SHARR-Key",
                        ],
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "SHARRKeyC551FE02",
                        "Value",
                      ],
                    },
                  ],
                },
                {
                  "Action": "sqs:SendMessage",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SchedulingQueueB533E3CD",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "BasePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestratorSHARROrchestratorArnC8FB076A": {
      "Properties": {
        "Description": "Arn of the SHARR Orchestrator Step Function. This step function routes findings to remediation runbooks.",
        "Name": "/Solutions/bbb/OrchestratorArn",
        "Type": "String",
        "Value": {
          "Ref": "OrchestratorStateMachine1E795392",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "OrchestratorStateMachine1E795392": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "OrchestratorNestedLogStackNestedStackNestedLogStackNestedStackResource91223B3E",
        "OrchestratorRole9CF251DB",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SF1",
              "reason": "False alarm. Logging configuration is overridden to log ALL.",
            },
            {
              "id": "AwsSolutions-SF2",
              "reason": "X-Ray is not needed for this use case.",
            },
          ],
        },
      },
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"Get Finding Data from Input","States":{"Get Finding Data from Input":{"Type":"Pass","Comment":"Extract top-level data needed for remediation","Parameters":{"EventType.$":"$.detail-type","Findings.$":"$.detail.findings","CustomActionName.$":"$.detail.actionName"},"Next":"Process Findings"},"Process Findings":{"Type":"Map","Comment":"Process all findings in CloudWatch Event","Next":"EOJ","Parameters":{"Finding.$":"$$.Map.Item.Value","EventType.$":"$.EventType","CustomActionName.$":"$.CustomActionName"},"ItemsPath":"$.Findings","ItemProcessor":{"ProcessorConfig":{"Mode":"INLINE"},"StartAt":"Finding Workflow State NEW?","States":{"Finding Workflow State NEW?":{"Type":"Choice","Choices":[{"Or":[{"Variable":"$.EventType","StringEquals":"Security Hub Findings - Custom Action"},{"And":[{"Variable":"$.Finding.Workflow.Status","StringEquals":"NEW"},{"Variable":"$.EventType","StringEquals":"Security Hub Findings - Imported"}]}],"Next":"Get Remediation Approval Requirement"}],"Default":"Finding Workflow State is not NEW"},"Finding Workflow State is not NEW":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('Finding Workflow State is not NEW ({}).', $.Finding.Workflow.Status)","State.$":"States.Format('NOTNEW')"},"EventType.$":"$.EventType","Finding.$":"$.Finding"},"Next":"notify"},"notify":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Comment":"Send notifications","TimeoutSeconds":300,"HeartbeatSeconds":60,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"Automation Document is not Active":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('Automation Document ({}) is not active ({}) in the member account({}).', $.AutomationDocId, $.AutomationDocument.DocState, $.Finding.AwsAccountId)","State.$":"States.Format('REMEDIATIONNOTACTIVE')","updateSecHub":"yes"},"EventType.$":"$.EventType","Finding.$":"$.Finding","AccountId.$":"$.AutomationDocument.AccountId","AutomationDocId.$":"$.AutomationDocument.AutomationDocId","RemediationRole.$":"$.AutomationDocument.RemediationRole","ControlId.$":"$.AutomationDocument.ControlId","SecurityStandard.$":"$.AutomationDocument.SecurityStandard","SecurityStandardVersion.$":"$.AutomationDocument.SecurityStandardVersion"},"Next":"notify"},"Automation Doc Active?":{"Type":"Choice","Choices":[{"Variable":"$.AutomationDocument.DocState","StringEquals":"ACTIVE","Next":"Send Task Token"},{"Variable":"$.AutomationDocument.DocState","StringEquals":"NOTACTIVE","Next":"Automation Document is not Active"},{"Variable":"$.AutomationDocument.DocState","StringEquals":"NOTENABLED","Next":"Security Standard is not enabled"},{"Variable":"$.AutomationDocument.DocState","StringEquals":"NOTFOUND","Next":"No Remediation for Control"}],"Default":"check_ssm_doc_state Error"},"Get Automation Document State":{"Next":"Automation Doc Active?","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"Orchestrator Failed"}],"Type":"Task","Comment":"Get the status of the remediation automation document in the target account","TimeoutSeconds":60,"ResultPath":"$.AutomationDocument","ResultSelector":{"DocState.$":"$.Payload.status","Message.$":"$.Payload.message","SecurityStandard.$":"$.Payload.securitystandard","SecurityStandardVersion.$":"$.Payload.securitystandardversion","SecurityStandardSupported.$":"$.Payload.standardsupported","ControlId.$":"$.Payload.controlid","AccountId.$":"$.Payload.accountid","RemediationRole.$":"$.Payload.remediationrole","AutomationDocId.$":"$.Payload.automationdocid","ResourceRegion.$":"$.Payload.resourceregion"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"Get Remediation Approval Requirement":{"Next":"Get Automation Document State","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"Orchestrator Failed"}],"Type":"Task","Comment":"Determine whether the selected remediation requires manual approval","TimeoutSeconds":300,"ResultPath":"$.Workflow","ResultSelector":{"WorkflowDocument.$":"$.Payload.workflowdoc","WorkflowAccount.$":"$.Payload.workflowaccount","WorkflowRole.$":"$.Payload.workflowrole","WorkflowConfig.$":"$.Payload.workflow_data"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"Orchestrator Failed":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('Orchestrator failed: {}', $.Error)","State.$":"States.Format('LAMBDAERROR')","Details.$":"States.Format('Cause: {}', $.Cause)"},"Payload.$":"$"},"Next":"notify"},"Send Task Token":{"Next":"Remediation Wait","Catch":[{"ErrorEquals":["States.ALL"],"Next":"Orchestrator Failed"}],"Type":"Task","Comment":"Send Task Token to SQS Queue for Remediation Scheduling","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken","Parameters":{"QueueUrl":"",
              {
                "Ref": "SchedulingQueueB533E3CD",
              },
              "","MessageBody":{"RemediationDetails.$":"$","TaskToken.$":"$$.Task.Token","AccountId.$":"$.AutomationDocument.AccountId","ResourceRegion.$":"$.AutomationDocument.ResourceRegion","executionId.$":"$$.Execution.Id"}}},"Remediation Wait":{"Type":"Wait","Comment":"Waiting for remediation","TimestampPath":"$.PlannedTimestamp","Next":"Execute Remediation"},"Execute Remediation":{"Next":"Remediation Queued","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"Orchestrator Failed"}],"Type":"Task","Comment":"Execute the SSM Automation Document in the target account","TimeoutSeconds":300,"HeartbeatSeconds":60,"ResultPath":"$.SSMExecution","ResultSelector":{"ExecState.$":"$.Payload.status","RemediationOutput.$":"$.Payload.remediation_output","Message.$":"$.Payload.message","ExecId.$":"$.Payload.executionid","Account.$":"$.Payload.executionaccount","Region.$":"$.Payload.executionregion"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"Remediation Queued":{"Type":"Pass","Comment":"Set parameters for notification","Parameters":{"EventType.$":"$.EventType","CustomActionName.$":"$.CustomActionName","Finding.$":"$.Finding","AutomationDocument.$":"$.AutomationDocument","SSMExecution.$":"$.SSMExecution","Notification":{"Message.$":"States.Format('Remediation queued for {} control {} in account {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId)","State.$":"States.Format('QUEUED')","ExecId.$":"$.SSMExecution.ExecId","RemediationOutput.$":"$.SSMExecution.RemediationOutput"}},"Next":"Queued Notification"},"Queued Notification":{"Next":"execMonitor","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Comment":"Send notification that a remediation has queued","TimeoutSeconds":300,"HeartbeatSeconds":60,"ResultPath":"$.notificationResult","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"execMonitor":{"Next":"Remediation completed?","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"Orchestrator Failed"}],"Type":"Task","Comment":"Monitor the remediation execution until done","TimeoutSeconds":300,"HeartbeatSeconds":60,"ResultPath":"$.Remediation","ResultSelector":{"ExecState.$":"$.Payload.status","ExecId.$":"$.Payload.executionid","RemediationState.$":"$.Payload.remediation_status","Message.$":"$.Payload.message","RemediationOutput.$":"$.Payload.remediation_output","LogData.$":"$.Payload.logdata","AffectedObject.$":"$.Payload.affected_object"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"arn:aws:lambda:us-east-1:111122223333:function/foobar","Payload.$":"$"}},"Wait for Remediation":{"Type":"Wait","Seconds":15,"Next":"execMonitor"},"Remediation completed?":{"Type":"Choice","Choices":[{"Variable":"$.Remediation.RemediationState","StringEquals":"Failed","Next":"Remediation Failed"},{"Variable":"$.Remediation.ExecState","StringEquals":"Success","Next":"Remediation Succeeded"},{"Variable":"$.Remediation.ExecState","StringEquals":"TimedOut","Next":"Remediation Failed"},{"Variable":"$.Remediation.ExecState","StringEquals":"Cancelling","Next":"Remediation Failed"},{"Variable":"$.Remediation.ExecState","StringEquals":"Cancelled","Next":"Remediation Failed"},{"Variable":"$.Remediation.ExecState","StringEquals":"Failed","Next":"Remediation Failed"}],"Default":"Wait for Remediation"},"Remediation Failed":{"Type":"Pass","Comment":"Set parameters for notification","Parameters":{"EventType.$":"$.EventType","Finding.$":"$.Finding","SSMExecution.$":"$.SSMExecution","AutomationDocument.$":"$.AutomationDocument","Notification":{"Message.$":"States.Format('Remediation failed for {} control {} in account {}: {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId, $.Remediation.Message)","RemediationOutput.$":"$.Remediation.RemediationOutput","State.$":"$.Remediation.ExecState","Details.$":"$.Remediation.LogData","ExecId.$":"$.Remediation.ExecId","AffectedObject.$":"$.Remediation.AffectedObject"}},"Next":"notify"},"Remediation Succeeded":{"Type":"Pass","Comment":"Set parameters for notification","Parameters":{"EventType.$":"$.EventType","Finding.$":"$.Finding","CustomActionName.$":"$.CustomActionName","AccountId.$":"$.AutomationDocument.AccountId","AutomationDocId.$":"$.AutomationDocument.AutomationDocId","RemediationRole.$":"$.AutomationDocument.RemediationRole","ControlId.$":"$.AutomationDocument.ControlId","SecurityStandard.$":"$.AutomationDocument.SecurityStandard","SecurityStandardVersion.$":"$.AutomationDocument.SecurityStandardVersion","Notification":{"Message.$":"States.Format('Remediation succeeded for {} control {} in account {}: {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId, $.Remediation.Message)","RemediationOutput.$":"$.Remediation.RemediationOutput","State.$":"States.Format('SUCCESS')","Details.$":"$.Remediation.LogData","ExecId.$":"$.Remediation.ExecId","AffectedObject.$":"$.Remediation.AffectedObject"}},"Next":"Which custom action triggered this workflow?"},"Which custom action triggered this workflow?":{"Type":"Choice","Choices":[{"Variable":"$.CustomActionName","StringEquals":"ASR:Remediate&Ticket","Next":"Generate Ticket"}],"Default":"notify"},"Generate Ticket":{"Next":"notify","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Comment":"Create ticket using ticket generator function ARN passed to the stack during deployment. The ARN in this step will be a placeholder string unless you filled in the Ticket Generator Function ARN parameter during Admin stack deployment.","TimeoutSeconds":300,"HeartbeatSeconds":60,"ResultPath":"$.GenerateTicket","ResultSelector":{"TicketURL.$":"$.Payload.TicketURL","Ok.$":"$.Payload.Ok","ResponseCode.$":"$.Payload.ResponseCode","ResponseReason.$":"$.Payload.ResponseReason"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::If": [
                  "OrchestratorTicketingEnabledCondition92C496EF",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":lambda:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":function:",
                        {
                          "Ref": "TicketGenFunctionName",
                        },
                      ],
                    ],
                  },
                  "No Lambda Function ARN available. Ticketing feature is disabled.",
                ],
              },
              "","Payload":{"RemediationInfo":{"Message.$":"$.Notification.Message","FindingDescription.$":"$.Finding.Description","FindingSeverity.$":"$.Finding.Severity.Label","SecurityControlId.$":"$.Finding.Compliance.SecurityControlId","FindingAccountId.$":"$.Finding.AwsAccountId","AffectedResource.$":"$.Notification.AffectedObject"}}}},"check_ssm_doc_state Error":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('check_ssm_doc_state returned an error: {}', $.AutomationDocument.Message)","State.$":"States.Format('LAMBDAERROR')"},"EventType.$":"$.EventType","Finding.$":"$.Finding"},"Next":"notify"},"Security Standard is not enabled":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('Security Standard ({}) v{} is not enabled.', $.AutomationDocument.SecurityStandard, $.AutomationDocument.SecurityStandardVersion)","State.$":"States.Format('STANDARDNOTENABLED')","updateSecHub":"yes"},"EventType.$":"$.EventType","Finding.$":"$.Finding","AccountId.$":"$.AutomationDocument.AccountId","AutomationDocId.$":"$.AutomationDocument.AutomationDocId","RemediationRole.$":"$.AutomationDocument.RemediationRole","ControlId.$":"$.AutomationDocument.ControlId","SecurityStandard.$":"$.AutomationDocument.SecurityStandard","SecurityStandardVersion.$":"$.AutomationDocument.SecurityStandardVersion"},"Next":"notify"},"No Remediation for Control":{"Type":"Pass","Parameters":{"Notification":{"Message.$":"States.Format('Security Standard {} v{} control {} has no automated remediation.', $.AutomationDocument.SecurityStandard, $.AutomationDocument.SecurityStandardVersion, $.AutomationDocument.ControlId)","State.$":"States.Format('NOREMEDIATION')","updateSecHub":"yes"},"EventType.$":"$.EventType","Finding.$":"$.Finding","AccountId.$":"$.AutomationDocument.AccountId","AutomationDocId.$":"$.AutomationDocument.AutomationDocId","RemediationRole.$":"$.AutomationDocument.RemediationRole","ControlId.$":"$.AutomationDocument.ControlId","SecurityStandard.$":"$.AutomationDocument.SecurityStandard","SecurityStandardVersion.$":"$.AutomationDocument.SecurityStandardVersion"},"Next":"notify"}}}},"EOJ":{"Type":"Pass","Comment":"END-OF-JOB","End":true}},"TimeoutSeconds":5400}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:ORCH_LOG_GROUP:*",
                    ],
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "OrchestratorRole9CF251DB",
            "Arn",
          ],
        },
        "StateMachineName": "bbb-SHARR-Orchestrator",
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "SHARRKeyC551FE02": {
      "Properties": {
        "Description": "KMS Customer Managed Key that SHARR will use to encrypt data",
        "Name": "/Solutions/SO0111/CMK_ARN",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SHARRkeyAlias37E34763": {
      "Properties": {
        "AliasName": "alias/TO0111-SHARR-Key",
        "TargetKeyId": {
          "Fn::GetAtt": [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "SHARRkeyE6BD0F56": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "sns.amazonaws.com",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "logs.",
                        {
                          "Ref": "AWS::URLSuffix",
                        },
                      ],
                    ],
                  },
                ],
              },
              "Resource": "*",
            },
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "SchedulingQueueB533E3CD": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulingQueuePolicy36FAAC29": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sqs:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulingQueueB533E3CD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "SchedulingQueueB533E3CD",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;
